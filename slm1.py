# -*- coding: utf-8 -*-
"""SLM1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gcEfilBG4-p7wf0OEcfXIO3SkCDnnuTy
"""

# ✅ Install Required Packages
!pip install -q datasets sentence-transformers

# ✅ Imports
import pandas as pd
import numpy as np
from datasets import load_dataset
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score
from sentence_transformers import SentenceTransformer, util
import gc  # for cleanup

# ✅ STEP 2: Load CIC-IDS-2017 Dataset from Hugging Face (No CSV)
dataset = load_dataset("sonnh-tech1/cic-ids-2017", "binary")
df = dataset["train"].to_pandas()
print(df)

# ✅ Sample to avoid crashing (adjust if needed)
df = df.sample(n=60000, random_state=42).reset_index(drop=True)

# ✅ Preprocess
df.dropna(inplace=True)
numeric_df = df.select_dtypes(include=[np.number])
if 'Label' not in numeric_df.columns and 'Label' in df.columns:
    numeric_df['Label'] = df['Label']

X = numeric_df.drop(columns=['Label'], errors='ignore')
y = LabelEncoder().fit_transform(numeric_df['Label'])

# ✅ Scale
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ✅ Convert to sentence-style text
text_data = pd.DataFrame(X_scaled).astype(str).agg(' '.join, axis=1).tolist()

# ✅ Load MiniLM model
model = SentenceTransformer('paraphrase-MiniLM-L3-v2')

# ✅ Encode using multiprocessing & batching (RAM-efficient)
X_embed = model.encode(
    text_data,
    batch_size=16,
    convert_to_numpy=True,
    show_progress_bar=True
)

# ✅ Train/Test split
X_train, X_test, y_train, y_test = train_test_split(
    X_embed, y, test_size=0.2, stratify=y, random_state=42
)
# ✅ Train classifier
clf = LogisticRegression(
    max_iter=1000,
    class_weight='balanced',
    C=0.3
)
clf.fit(X_train, y_train)

# ✅ Evaluate
y_pred = clf.predict(X_test)

print("\n✅ Accuracy:", accuracy_score(y_test, y_pred))
print("\n✅ Classification Report:\n", classification_report(y_test, y_pred))


from sklearn.metrics import (
    classification_report, accuracy_score, confusion_matrix
)
from sentence_transformers import SentenceTransformer
import seaborn as sns
import matplotlib.pyplot as plt

# ✅ STEP 13: Confusion Matrix Plot
cm = confusion_matrix(y_test, y_pred)
labels = list(LabelEncoder().fit(df['Label']).classes_)

plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=labels, yticklabels=labels)
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()