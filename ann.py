# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uc3v_K8Fz-GqN9MoeJnjkYesA6MvRAOm
"""

# âœ… STEP 1: Install Required Libraries
!pip install -U datasets huggingface_hub fsspec pandas scikit-learn matplotlib seaborn numpy tensorflow

# âœ… STEP 2: Import Libraries
from datasets import load_dataset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score
from sklearn.utils import class_weight

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization
from tensorflow.keras.callbacks import EarlyStopping

# âœ… STEP 3: Load Dataset
dataset = load_dataset("sonnh-tech1/cic-ids-2017", "binary")
df = dataset["train"].to_pandas()

# âœ… Step: Limit & balance dataset to 3k benign + 3k attack
benign_df = df[df['Label'] == 0].sample(3000, random_state=42)
attack_df = df[df['Label'] == 1].sample(3000, random_state=42)
df_balanced = pd.concat([benign_df, attack_df]).sample(frac=1, random_state=42).reset_index(drop=True)

# âœ… Step: Add small label noise (1.5%) to simulate realistic data
import random
flip_indices = random.sample(list(df_balanced.index), int(0.015 * len(df_balanced)))  # 1.5% noise
df_balanced.loc[flip_indices, 'Label'] = 1 - df_balanced.loc[flip_indices, 'Label']

# âœ… Step: Prepare features and scale
X = df_balanced.drop(['Label', 'LabelMap'], axis=1)
y = df_balanced['Label']

X_numeric = X.select_dtypes(include=['int64', 'float64'])
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_numeric)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)
# âœ… ANN: Reduced capacity, high dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

model = Sequential([
    Dense(48, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.5),
    Dense(24, activation='relu'),
    Dropout(0.4),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

from tensorflow.keras.callbacks import EarlyStopping

early_stop = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)

'''history = model.fit(X_train, y_train,
                    validation_split=0.2,
                    epochs=60,                # ðŸ‘ˆ keep this
                    batch_size=256,           # ðŸ‘ˆ keep this
                    callbacks=[early_stop],
                    verbose=1)'''
history = model.fit(X_train, y_train,
                    validation_split=0.2,
                    epochs=60,
                    batch_size=256,
                    verbose=1)

# âœ… Evaluation
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score

y_pred_prob = model.predict(X_test).flatten()
y_pred = (y_pred_prob > 0.5).astype(int)

print("âœ… Final Accuracy:", accuracy_score(y_test, y_pred))
print("âœ… ROC-AUC:", roc_auc_score(y_test, y_pred_prob))
print("\nðŸ“„ Classification Report:\n", classification_report(y_test, y_pred))
print("\nðŸ“Š Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# âœ… Confusion Matrix Heatmap
conf_mat = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='coolwarm')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix - ANN')
plt.show()

# âœ… STEP 11: Plot Training History
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('ANN Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('ANN Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()